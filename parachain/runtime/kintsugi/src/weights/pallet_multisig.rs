
//! Autogenerated weights for pallet_multisig
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-08, STEPS: `50`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `interlay-hetzner-01`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 50
// --repeat
// 10
// --output
// parachain/runtime/kintsugi/src/weights/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for pallet_multisig using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_multisig::WeightInfo for WeightInfo<T> {

	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_threshold_1	(z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 20_090_000 picoseconds.
		Weight::from_parts(21_014_524, 0)
			// Standard Error: 12
			.saturating_add(Weight::from_parts(559, 0).saturating_mul(z.into()))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_create	(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `805 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 78_087_000 picoseconds.
		Weight::from_parts(65_009_705, 6811)
			// Standard Error: 9_297
			.saturating_add(Weight::from_parts(154_205, 0).saturating_mul(s.into()))
			// Standard Error: 91
			.saturating_add(Weight::from_parts(1_703, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[3, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_approve	(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `6811`
		// Minimum execution time: 45_190_000 picoseconds.
		Weight::from_parts(37_464_328, 6811)
			// Standard Error: 2_446
			.saturating_add(Weight::from_parts(94_245, 0).saturating_mul(s.into()))
			// Standard Error: 23
			.saturating_add(Weight::from_parts(1_583, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	/// The range of component `z` is `[0, 10000]`.
	fn as_multi_complete	(s: u32, z: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `947 + s * (34 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 77_686_000 picoseconds.
		Weight::from_parts(74_141_319, 6811)
			// Standard Error: 7_848
			.saturating_add(Weight::from_parts(110_944, 0).saturating_mul(s.into()))
			// Standard Error: 76
			.saturating_add(Weight::from_parts(1_065, 0).saturating_mul(z.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_create	(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `805 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 61_834_000 picoseconds.
		Weight::from_parts(67_189_898, 6811)
			// Standard Error: 5_830
			.saturating_add(Weight::from_parts(111_135, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn approve_as_multi_approve	(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `210`
		//  Estimated: `6811`
		// Minimum execution time: 34_108_000 picoseconds.
		Weight::from_parts(34_858_194, 6811)
			// Standard Error: 4_717
			.saturating_add(Weight::from_parts(108_367, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Multisig Multisigs (r:1 w:1)
	/// Proof: Multisig Multisigs (max_values: None, max_size: Some(3346), added: 5821, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `s` is `[2, 100]`.
	fn cancel_as_multi	(s: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1011 + s * (2 ±0)`
		//  Estimated: `6811`
		// Minimum execution time: 58_226_000 picoseconds.
		Weight::from_parts(60_429_148, 6811)
			// Standard Error: 10_706
			.saturating_add(Weight::from_parts(139_133, 0).saturating_mul(s.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}