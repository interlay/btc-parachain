
//! Autogenerated weights for `pallet_recovery`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-06-26, STEPS: `50`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `Nakul`, CPU: `<UNKNOWN>`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// pallet_recovery
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 50
// --repeat
// 10
// --output
// weight.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::Weight};
use sp_std::marker::PhantomData;

/// Weight functions for `pallet_recovery`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_recovery::WeightInfo for WeightInfo<T> {
    /// Storage: Recovery Proxy (r:1 w:0)
    /// Proof: Recovery Proxy (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    fn as_recovered() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `111`
        //  Estimated: `3545`
        // Minimum execution time: 9_000_000 picoseconds.
        Weight::from_parts(9_000_000, 0)
            .saturating_add(Weight::from_parts(0, 3545))
            .saturating_add(T::DbWeight::get().reads(1))
    }
    /// Storage: Recovery Proxy (r:0 w:1)
    /// Proof: Recovery Proxy (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    fn set_recovered() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `0`
        //  Estimated: `0`
        // Minimum execution time: 8_000_000 picoseconds.
        Weight::from_parts(8_000_000, 0)
            .saturating_add(Weight::from_parts(0, 0))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Recovery Recoverable (r:1 w:1)
    /// Proof: Recovery Recoverable (max_values: None, max_size: Some(351), added: 2826, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 9]`.
    fn create_recovery(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `334 + n * (27 ±0)`
        //  Estimated: `7396`
        // Minimum execution time: 25_000_000 picoseconds.
        Weight::from_parts(26_652_363, 0)
            .saturating_add(Weight::from_parts(0, 7396))
            // Standard Error: 15_481
            .saturating_add(Weight::from_parts(32_109, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Recovery Recoverable (r:1 w:0)
    /// Proof: Recovery Recoverable (max_values: None, max_size: Some(351), added: 2826, mode: MaxEncodedLen)
    /// Storage: Recovery ActiveRecoveries (r:1 w:1)
    /// Proof: Recovery ActiveRecoveries (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
    fn initiate_recovery() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `689`
        //  Estimated: `11250`
        // Minimum execution time: 31_000_000 picoseconds.
        Weight::from_parts(32_000_000, 0)
            .saturating_add(Weight::from_parts(0, 11250))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Recovery Recoverable (r:1 w:0)
    /// Proof: Recovery Recoverable (max_values: None, max_size: Some(351), added: 2826, mode: MaxEncodedLen)
    /// Storage: Recovery ActiveRecoveries (r:1 w:1)
    /// Proof: Recovery ActiveRecoveries (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 9]`.
    fn vouch_recovery(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `190 + n * (64 ±0)`
        //  Estimated: `7670`
        // Minimum execution time: 16_000_000 picoseconds.
        Weight::from_parts(16_669_776, 0)
            .saturating_add(Weight::from_parts(0, 7670))
            // Standard Error: 15_399
            .saturating_add(Weight::from_parts(249_312, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(2))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Recovery Recoverable (r:1 w:0)
    /// Proof: Recovery Recoverable (max_values: None, max_size: Some(351), added: 2826, mode: MaxEncodedLen)
    /// Storage: Recovery ActiveRecoveries (r:1 w:0)
    /// Proof: Recovery ActiveRecoveries (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
    /// Storage: Recovery Proxy (r:1 w:1)
    /// Proof: Recovery Proxy (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 9]`.
    fn claim_recovery(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `222 + n * (64 ±0)`
        //  Estimated: `11215`
        // Minimum execution time: 20_000_000 picoseconds.
        Weight::from_parts(20_809_079, 0)
            .saturating_add(Weight::from_parts(0, 11215))
            // Standard Error: 8_087
            .saturating_add(Weight::from_parts(65_887, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(1))
    }
    /// Storage: Recovery ActiveRecoveries (r:1 w:1)
    /// Proof: Recovery ActiveRecoveries (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:2 w:2)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 9]`.
    fn close_recovery(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `612 + n * (59 ±0)`
        //  Estimated: `10024`
        // Minimum execution time: 41_000_000 picoseconds.
        Weight::from_parts(41_976_368, 0)
            .saturating_add(Weight::from_parts(0, 10024))
            // Standard Error: 15_597
            .saturating_add(Weight::from_parts(104_346, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(3))
    }
    /// Storage: Recovery ActiveRecoveries (r:1 w:0)
    /// Proof: Recovery ActiveRecoveries (max_values: None, max_size: Some(389), added: 2864, mode: MaxEncodedLen)
    /// Storage: Recovery Recoverable (r:1 w:1)
    /// Proof: Recovery Recoverable (max_values: None, max_size: Some(351), added: 2826, mode: MaxEncodedLen)
    /// Storage: Tokens Accounts (r:1 w:1)
    /// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
    /// The range of component `n` is `[1, 9]`.
    fn remove_recovery(n: u32, ) -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `465 + n * (59 ±0)`
        //  Estimated: `11250`
        // Minimum execution time: 27_000_000 picoseconds.
        Weight::from_parts(27_846_393, 0)
            .saturating_add(Weight::from_parts(0, 11250))
            // Standard Error: 10_488
            .saturating_add(Weight::from_parts(75_183, 0).saturating_mul(n.into()))
            .saturating_add(T::DbWeight::get().reads(3))
            .saturating_add(T::DbWeight::get().writes(2))
    }
    /// Storage: Recovery Proxy (r:1 w:1)
    /// Proof: Recovery Proxy (max_values: None, max_size: Some(80), added: 2555, mode: MaxEncodedLen)
    fn cancel_recovered() -> Weight {
        // Proof Size summary in bytes:
        //  Measured:  `111`
        //  Estimated: `3545`
        // Minimum execution time: 10_000_000 picoseconds.
        Weight::from_parts(10_000_000, 0)
            .saturating_add(Weight::from_parts(0, 3545))
            .saturating_add(T::DbWeight::get().reads(1))
            .saturating_add(T::DbWeight::get().writes(1))
    }
}
