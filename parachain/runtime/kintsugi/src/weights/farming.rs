
//! Autogenerated weights for farming
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-04, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `nakul-GF65-Thin-10UE`, CPU: `Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 2
// --repeat
// 1
// --template
// .deploy/runtime-weight-template.hbs
// --chain
// kintsugi-dev
// --output
// parachain/runtime/kintsugi/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for farming using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> farming::WeightInfo for WeightInfo<T> {

	/// Storage: Farming RewardSchedules (r:5 w:0)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalStake (r:2 w:0)
	/// Proof: FarmingRewards TotalStake (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 4]`.
	fn on_initialize	(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `232 + c * (38 ±0)`
		//  Estimated: `13735`
		// Minimum execution time: 95_271_000 picoseconds.
		Weight::from_parts(143_974_000, 13735)
			.saturating_add(T::DbWeight::get().reads(7_u64))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:1)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming RewardSchedules (r:1 w:1)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn update_reward_schedule	() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `866`
		//  Estimated: `6170`
		// Minimum execution time: 200_879_000 picoseconds.
		Weight::from_parts(200_879_000, 6170)
			.saturating_add(T::DbWeight::get().reads(4_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	/// Storage: Farming RewardSchedules (r:0 w:1)
	/// Proof: Farming RewardSchedules (max_values: None, max_size: Some(74), added: 2549, mode: MaxEncodedLen)
	fn remove_reward_schedule	() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `965`
		//  Estimated: `6170`
		// Minimum execution time: 169_780_000 picoseconds.
		Weight::from_parts(169_780_000, 6170)
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(3_u64))
	}
	/// Storage: FarmingRewards RewardCurrencies (r:1 w:0)
	/// Proof: FarmingRewards RewardCurrencies (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: FarmingRewards Stake (r:1 w:1)
	/// Proof: FarmingRewards Stake (max_values: None, max_size: Some(75), added: 2550, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalStake (r:1 w:1)
	/// Proof: FarmingRewards TotalStake (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardTally (r:4 w:4)
	/// Proof: FarmingRewards RewardTally (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardPerToken (r:4 w:0)
	/// Proof: FarmingRewards RewardPerToken (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 4]`.
	fn deposit	(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `919 + c * (70 ±0)`
		//  Estimated: `11298`
		// Minimum execution time: 204_722_000 picoseconds.
		Weight::from_parts(292_878_000, 11298)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: FarmingRewards RewardCurrencies (r:1 w:0)
	/// Proof: FarmingRewards RewardCurrencies (max_values: None, max_size: Some(138), added: 2613, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: FarmingRewards Stake (r:1 w:1)
	/// Proof: FarmingRewards Stake (max_values: None, max_size: Some(75), added: 2550, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalStake (r:1 w:1)
	/// Proof: FarmingRewards TotalStake (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardTally (r:4 w:4)
	/// Proof: FarmingRewards RewardTally (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardPerToken (r:4 w:0)
	/// Proof: FarmingRewards RewardPerToken (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// The range of component `c` is `[1, 4]`.
	fn withdraw	(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `919 + c * (70 ±0)`
		//  Estimated: `11298`
		// Minimum execution time: 193_049_000 picoseconds.
		Weight::from_parts(4_201_914_000, 11298)
			.saturating_add(T::DbWeight::get().reads(12_u64))
			.saturating_add(T::DbWeight::get().writes(7_u64))
	}
	/// Storage: FarmingRewards Stake (r:1 w:0)
	/// Proof: FarmingRewards Stake (max_values: None, max_size: Some(75), added: 2550, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardPerToken (r:1 w:0)
	/// Proof: FarmingRewards RewardPerToken (max_values: None, max_size: Some(70), added: 2545, mode: MaxEncodedLen)
	/// Storage: FarmingRewards RewardTally (r:1 w:1)
	/// Proof: FarmingRewards RewardTally (max_values: None, max_size: Some(102), added: 2577, mode: MaxEncodedLen)
	/// Storage: FarmingRewards TotalRewards (r:1 w:1)
	/// Proof: FarmingRewards TotalRewards (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:2 w:2)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// Storage: System Account (r:1 w:0)
	/// Proof: System Account (max_values: None, max_size: Some(128), added: 2603, mode: MaxEncodedLen)
	fn claim	() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1338`
		//  Estimated: `6170`
		// Minimum execution time: 264_618_000 picoseconds.
		Weight::from_parts(264_618_000, 6170)
			.saturating_add(T::DbWeight::get().reads(7_u64))
			.saturating_add(T::DbWeight::get().writes(4_u64))
	}
}