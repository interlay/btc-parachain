
//! Autogenerated weights for pallet_proxy
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-08, STEPS: `50`, REPEAT: `10`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `interlay-hetzner-01`, CPU: `AMD EPYC 7502P 32-Core Processor`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("kintsugi-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --chain
// kintsugi-dev
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 50
// --repeat
// 10
// --output
// parachain/runtime/kintsugi/src/weights/
// --template
// .deploy/runtime-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for pallet_proxy using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> pallet_proxy::WeightInfo for WeightInfo<T> {

	/// Storage: Proxy Proxies (r:1 w:0)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(1241), added: 3716, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 31]`.
	fn proxy	(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `251 + p * (37 ±0)`
		//  Estimated: `4706`
		// Minimum execution time: 31_964_000 picoseconds.
		Weight::from_parts(32_607_057, 4706)
			// Standard Error: 3_848
			.saturating_add(Weight::from_parts(34_653, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// Storage: Proxy Proxies (r:1 w:0)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(1241), added: 3716, mode: MaxEncodedLen)
	/// Storage: Proxy Announcements (r:1 w:1)
	/// Proof: Proxy Announcements (max_values: None, max_size: Some(2233), added: 4708, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn proxy_announced	(a: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1031 + a * (68 ±0) + p * (37 ±0)`
		//  Estimated: `5698`
		// Minimum execution time: 70_511_000 picoseconds.
		Weight::from_parts(74_988_336, 5698)
			// Standard Error: 31_027
			.saturating_add(Weight::from_parts(215_809, 0).saturating_mul(a.into()))
			// Standard Error: 32_100
			.saturating_add(Weight::from_parts(63_251, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Proxy Announcements (r:1 w:1)
	/// Proof: Proxy Announcements (max_values: None, max_size: Some(2233), added: 4708, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn remove_announcement	(a: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `946 + a * (68 ±0)`
		//  Estimated: `5698`
		// Minimum execution time: 46_614_000 picoseconds.
		Weight::from_parts(48_790_668, 5698)
			// Standard Error: 3_817
			.saturating_add(Weight::from_parts(306_233, 0).saturating_mul(a.into()))
			// Standard Error: 3_949
			.saturating_add(Weight::from_parts(7_205, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Proxy Announcements (r:1 w:1)
	/// Proof: Proxy Announcements (max_values: None, max_size: Some(2233), added: 4708, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn reject_announcement	(a: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `946 + a * (68 ±0)`
		//  Estimated: `5698`
		// Minimum execution time: 46_623_000 picoseconds.
		Weight::from_parts(46_315_364, 5698)
			// Standard Error: 15_346
			.saturating_add(Weight::from_parts(354_640, 0).saturating_mul(a.into()))
			// Standard Error: 15_877
			.saturating_add(Weight::from_parts(79_126, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Proxy Proxies (r:1 w:0)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(1241), added: 3716, mode: MaxEncodedLen)
	/// Storage: Proxy Announcements (r:1 w:1)
	/// Proof: Proxy Announcements (max_values: None, max_size: Some(2233), added: 4708, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `a` is `[0, 31]`.
	/// The range of component `p` is `[1, 31]`.
	fn announce	(a: u32, p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `963 + a * (68 ±0) + p * (37 ±0)`
		//  Estimated: `5698`
		// Minimum execution time: 70_181_000 picoseconds.
		Weight::from_parts(70_173_031, 5698)
			// Standard Error: 33_117
			.saturating_add(Weight::from_parts(342_784, 0).saturating_mul(a.into()))
			// Standard Error: 34_262
			.saturating_add(Weight::from_parts(158_438, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(3_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(1241), added: 3716, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 31]`.
	fn add_proxy	(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `807 + p * (37 ±0)`
		//  Estimated: `4706`
		// Minimum execution time: 61_303_000 picoseconds.
		Weight::from_parts(63_401_478, 4706)
			// Standard Error: 6_998
			.saturating_add(Weight::from_parts(70_473, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(1241), added: 3716, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 31]`.
	fn remove_proxy	(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `807 + p * (37 ±0)`
		//  Estimated: `4706`
		// Minimum execution time: 53_336_000 picoseconds.
		Weight::from_parts(55_860_047, 4706)
			// Standard Error: 7_221
			.saturating_add(Weight::from_parts(84_706, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(1241), added: 3716, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 31]`.
	fn remove_proxies	(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `807 + p * (37 ±0)`
		//  Estimated: `4706`
		// Minimum execution time: 43_988_000 picoseconds.
		Weight::from_parts(45_555_051, 4706)
			// Standard Error: 4_897
			.saturating_add(Weight::from_parts(31_808, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(1241), added: 3716, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `p` is `[1, 31]`.
	fn create_pure	(p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `819`
		//  Estimated: `4706`
		// Minimum execution time: 65_762_000 picoseconds.
		Weight::from_parts(68_097_594, 4706)
			// Standard Error: 8_203
			.saturating_add(Weight::from_parts(5_873, 0).saturating_mul(p.into()))
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
	/// Storage: Proxy Proxies (r:1 w:1)
	/// Proof: Proxy Proxies (max_values: None, max_size: Some(1241), added: 3716, mode: MaxEncodedLen)
	/// Storage: Tokens Accounts (r:1 w:1)
	/// Proof: Tokens Accounts (max_values: None, max_size: Some(115), added: 2590, mode: MaxEncodedLen)
	/// The range of component `p` is `[0, 30]`.
	fn kill_pure	(_p: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `877 + p * (37 ±0)`
		//  Estimated: `4706`
		// Minimum execution time: 46_433_000 picoseconds.
		Weight::from_parts(48_634_952, 4706)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2_u64))
	}
}