
//! Autogenerated weights for oracle
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-04, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `nakul-GF65-Thin-10UE`, CPU: `Intel(R) Core(TM) i7-10750H CPU @ 2.60GHz`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("interlay-dev"), DB CACHE: 1024

// Executed Command:
// ./target/release/interbtc-parachain
// benchmark
// pallet
// --pallet
// *
// --extrinsic
// *
// --execution=wasm
// --wasm-execution=compiled
// --steps
// 2
// --repeat
// 1
// --template
// .deploy/runtime-weight-template.hbs
// --chain
// interlay-dev
// --output
// parachain/runtime/interlay/src/weights/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weights for oracle using the Substrate node and recommended hardware.
pub struct WeightInfo<T>(PhantomData<T>);

impl<T: frame_system::Config> oracle::WeightInfo for WeightInfo<T> {

	/// Storage: Oracle RawValuesUpdated (r:1001 w:1000)
	/// Proof: Oracle RawValuesUpdated (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Oracle RawValues (r:2000 w:0)
	/// Proof: Oracle RawValues (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
	/// Storage: Oracle MaxDelay (r:1 w:0)
	/// Proof: Oracle MaxDelay (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: VaultRewards TotalStake (r:1000 w:0)
	/// Proof: VaultRewards TotalStake (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// Storage: VaultCapacity Stake (r:1000 w:0)
	/// Proof: VaultCapacity Stake (max_values: None, max_size: Some(43), added: 2518, mode: MaxEncodedLen)
	/// Storage: Loans Markets (r:1000 w:0)
	/// Proof: Loans Markets (max_values: None, max_size: Some(160), added: 2635, mode: MaxEncodedLen)
	/// Storage: Oracle Aggregate (r:0 w:1000)
	/// Proof: Oracle Aggregate (max_values: None, max_size: Some(44), added: 2519, mode: MaxEncodedLen)
	/// Storage: Oracle ValidUntil (r:0 w:1000)
	/// Proof: Oracle ValidUntil (max_values: None, max_size: Some(36), added: 2511, mode: MaxEncodedLen)
	/// The range of component `u` is `[1, 1000]`.
	fn on_initialize	(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `590 + u * (127 Â±0)`
		//  Estimated: `5150990`
		// Minimum execution time: 70_817_000 picoseconds.
		Weight::from_parts(35_252_159_000, 5150990)
			.saturating_add(T::DbWeight::get().reads(6003_u64))
			.saturating_add(T::DbWeight::get().writes(3000_u64))
	}
	/// Storage: Oracle AuthorizedOracles (r:1 w:0)
	/// Proof: Oracle AuthorizedOracles (max_values: None, max_size: Some(305), added: 2780, mode: MaxEncodedLen)
	/// Storage: Timestamp Now (r:1 w:0)
	/// Proof: Timestamp Now (max_values: Some(1), max_size: Some(8), added: 503, mode: MaxEncodedLen)
	/// Storage: Oracle RawValuesUpdated (r:0 w:1000)
	/// Proof: Oracle RawValuesUpdated (max_values: None, max_size: Some(29), added: 2504, mode: MaxEncodedLen)
	/// Storage: Oracle RawValues (r:0 w:1000)
	/// Proof: Oracle RawValues (max_values: None, max_size: Some(100), added: 2575, mode: MaxEncodedLen)
	/// The range of component `u` is `[1, 1000]`.
	fn feed_values	(_u: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `295`
		//  Estimated: `3770`
		// Minimum execution time: 38_279_000 picoseconds.
		Weight::from_parts(5_872_018_000, 3770)
			.saturating_add(T::DbWeight::get().reads(2_u64))
			.saturating_add(T::DbWeight::get().writes(2000_u64))
	}
	/// Storage: Oracle AuthorizedOracles (r:0 w:1)
	/// Proof: Oracle AuthorizedOracles (max_values: None, max_size: Some(305), added: 2780, mode: MaxEncodedLen)
	fn insert_authorized_oracle	() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 24_365_000 picoseconds.
		Weight::from_parts(24_365_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	/// Storage: Oracle AuthorizedOracles (r:0 w:1)
	/// Proof: Oracle AuthorizedOracles (max_values: None, max_size: Some(305), added: 2780, mode: MaxEncodedLen)
	fn remove_authorized_oracle	() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 22_822_000 picoseconds.
		Weight::from_parts(22_822_000, 0)
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
}